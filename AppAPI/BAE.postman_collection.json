{
	"variables": [],
	"info": {
		"name": "BAE",
		"_postman_id": "44bb7079-7057-54ea-7c91-e927913e59af",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "http://35.197.200.12:9000/api/transactions/getTransactionsForCitizen",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// example using pm.response.to.have\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// example using response assertions\r",
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.jsonBody(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 2000;"
						]
					}
				}
			],
			"request": {
				"url": "http://35.197.200.12:9000/api/transactions/getTransactionLocations",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkhhcnJ5IiwiaWQiOiI1ZDY0ZmQzNTI4OWMwMjc1YWIwNTA4MDciLCJleHAiOjE1NjY5ODU5MDksImlhdCI6MTU2Njg5OTUwOX0.Zwj1gffdsQDeFOyId_vHym19k8xtAT2l95GlKo_rxCU",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"atm\": {\n            \"transactions\": [\n                {\n                    \"timeStamp\": \"2015-05-01T14:37:32.320\",\n                    \"atmId\": 4779,\n                    \"bankCardNumber\": 6875694485295959,\n                    \"type\": \"Cash Withdrawal\",\n                    \"amount\": 20\n                }\n            ]\n        }\n\n        \"epos\": {\n            \"transactions\": [\n                {\n                    \"timestamp\": \"2015-05-03T14:50:55.203Z\",\n                    \"eposId\": 61860,\n                    \"bankCardNumber\": 6875694485295959,\n                    \"payeeAccount\": 98941947,\n                    \"amount\": 111.75\n                }\n            ],\n \n        }\n    }\n    "
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "http://35.197.200.12:9000/api/citizen/getCitizen",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// example using pm.response.to.have\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// example using response assertions\r",
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.jsonBody(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 100000;\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"\r",
							"\r",
							"postman.clearGlobalVariable(\"variable_key\");\r",
							"\r",
							"postman.clearEnvironmentVariable(\"variable_key\");\r",
							"\r",
							"\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 50000;\r",
							"\r",
							"postman.setGlobalVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"postman.setEnvironmentVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							"\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"var schema = {\r",
							" \"items\": {\r",
							" \"type\": \"boolean\"\r",
							" }\r",
							"};\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"tests[\"Valid Data1\"] = tv4.validate(data1, schema);\r",
							"console.log(\"Validation failed: \", tv4.error);"
						]
					}
				}
			],
			"request": {
				"url": "http://35.197.200.12:9000/api/citizen/getCitizen",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkhhcnJ5IiwiaWQiOiI1ZDY0ZmQzNTI4OWMwMjc1YWIwNTA4MDciLCJleHAiOjE1NjY5ODU5MDksImlhdCI6MTU2Njg5OTUwOX0.Zwj1gffdsQDeFOyId_vHym19k8xtAT2l95GlKo_rxCU",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"forenames\":\"Sarah Lesley\", \"surname\":\"Burns\", \"homeAddress\":\"72 SEVERN DRIVE, TAUNTON, TA1 2PW\"}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "http://35.197.200.12:9000/api/callrecords/getAssociates",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// example using pm.response.to.have\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// example using response assertions\r",
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.jsonBody(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 100000;\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"\r",
							"\r",
							"postman.clearGlobalVariable(\"variable_key\");\r",
							"\r",
							"postman.clearEnvironmentVariable(\"variable_key\");\r",
							"\r",
							"\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 50000;\r",
							"\r",
							"postman.setGlobalVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"postman.setEnvironmentVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							"\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"var schema = {\r",
							" \"items\": {\r",
							" \"type\": \"boolean\"\r",
							" }\r",
							"};\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"tests[\"Valid Data1\"] = tv4.validate(data1, schema);\r",
							"console.log(\"Validation failed: \", tv4.error);"
						]
					}
				}
			],
			"request": {
				"url": "http://35.197.200.12:9000/api/callrecords/getAssociates",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkhhcnJ5IiwiaWQiOiI1ZDY0ZmQzNTI4OWMwMjc1YWIwNTA4MDciLCJleHAiOjE1NjY5ODU5MDksImlhdCI6MTU2Njg5OTUwOX0.Zwj1gffdsQDeFOyId_vHym19k8xtAT2l95GlKo_rxCU",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"forenames\":\"Sarah Lesley\", \"surname\":\"Burns\", \"homeAddress\":\"72 SEVERN DRIVE, TAUNTON, TA1 2PW\"}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "http://35.197.200.12:9000/api/vehicle/getAnprCamera",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// example using pm.response.to.have\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// example using response assertions\r",
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.jsonBody(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 100000;\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"\r",
							"\r",
							"postman.clearGlobalVariable(\"variable_key\");\r",
							"\r",
							"postman.clearEnvironmentVariable(\"variable_key\");\r",
							"\r",
							"\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 50000;\r",
							"\r",
							"postman.setGlobalVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"postman.setEnvironmentVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							"\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"var schema = {\r",
							" \"items\": {\r",
							" \"type\": \"boolean\"\r",
							" }\r",
							"};\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"tests[\"Valid Data1\"] = tv4.validate(data1, schema);\r",
							"console.log(\"Validation failed: \", tv4.error);"
						]
					}
				}
			],
			"request": {
				"url": "http://35.197.200.12:9000/api/vehicle/getAnprCameras",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkhhcnJ5IiwiaWQiOiI1ZDY0ZmQzNTI4OWMwMjc1YWIwNTA4MDciLCJleHAiOjE1NjY5ODU5MDksImlhdCI6MTU2Njg5OTUwOX0.Zwj1gffdsQDeFOyId_vHym19k8xtAT2l95GlKo_rxCU",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"forenames\":\"Sarah Lesley\", \"surname\":\"Burns\", \"homeAddress\":\"72 SEVERN DRIVE, TAUNTON, TA1 2PW\"}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "http://35.197.200.12:9000/api/transactions/getTransactionLocations",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// example using pm.response.to.have\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// example using response assertions\r",
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.jsonBody(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 100000;\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"\r",
							"\r",
							"postman.clearGlobalVariable(\"variable_key\");\r",
							"\r",
							"postman.clearEnvironmentVariable(\"variable_key\");\r",
							"\r",
							"\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 50000;\r",
							"\r",
							"postman.setGlobalVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"postman.setEnvironmentVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							"\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"var schema = {\r",
							" \"items\": {\r",
							" \"type\": \"boolean\"\r",
							" }\r",
							"};\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"tests[\"Valid Data1\"] = tv4.validate(data1, schema);\r",
							"console.log(\"Validation failed: \", tv4.error);"
						]
					}
				}
			],
			"request": {
				"url": "http://35.197.200.12:9000/api/transactions/getTransactionLocations",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkhhcnJ5IiwiaWQiOiI1ZDY0ZmQzNTI4OWMwMjc1YWIwNTA4MDciLCJleHAiOjE1NjY5ODU5MDksImlhdCI6MTU2Njg5OTUwOX0.Zwj1gffdsQDeFOyId_vHym19k8xtAT2l95GlKo_rxCU",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \"atmTransactions\": \n              [\n                {\n                    \"timeStamp\": \"2015-05-01T14:37:32.320\",\n                    \"atmId\": 4779,\n                    \"bankCardNumber\": 6875694485295959,\n                    \"type\": \"Cash Withdrawal\",\n                    \"amount\": 20\n                }\n              ]\n,\n\n        \"eposTransactions\": \n             [\n                {\n                    \"timestamp\": \"2015-05-03T14:50:55.203Z\",\n                    \"eposId\": 61860,\n                    \"bankCardNumber\": 6875694485295959,\n                    \"payeeAccount\": 98941947,\n                    \"amount\": 111.75\n                }\n            ]\n \n        \n    }\n    "
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "http://35.197.200.12:9000/api/vehicle/getVehicle",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// example using pm.response.to.have\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// example using response assertions\r",
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.jsonBody(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 100000;\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"\r",
							"\r",
							"postman.clearGlobalVariable(\"variable_key\");\r",
							"\r",
							"postman.clearEnvironmentVariable(\"variable_key\");\r",
							"\r",
							"\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 50000;\r",
							"\r",
							"postman.setGlobalVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"postman.setEnvironmentVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							"\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"var schema = {\r",
							" \"items\": {\r",
							" \"type\": \"boolean\"\r",
							" }\r",
							"};\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"tests[\"Valid Data1\"] = tv4.validate(data1, schema);\r",
							"console.log(\"Validation failed: \", tv4.error);"
						]
					}
				}
			],
			"request": {
				"url": "http://35.197.200.12:9000/api/vehicle/getVehicle",
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Token eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IkhhcnJ5IiwiaWQiOiI1ZDY0ZmQzNTI4OWMwMjc1YWIwNTA4MDciLCJleHAiOjE1NjY5ODU5MDksImlhdCI6MTU2Njg5OTUwOX0.Zwj1gffdsQDeFOyId_vHym19k8xtAT2l95GlKo_rxCU",
						"description": ""
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"forenames\":\"Sarah Lesley\", \"surname\":\"Burns\", \"homeAddress\":\"72 SEVERN DRIVE, TAUNTON, TA1 2PW\"}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "http://35.197.200.12:9000/api/users",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// example using pm.response.to.have\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// example using response assertions\r",
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.jsonBody(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 100000;\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"\r",
							"\r",
							"postman.clearGlobalVariable(\"variable_key\");\r",
							"\r",
							"postman.clearEnvironmentVariable(\"variable_key\");\r",
							"\r",
							"\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 50000;\r",
							"\r",
							"postman.setGlobalVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"postman.setEnvironmentVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							"\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"var schema = {\r",
							" \"items\": {\r",
							" \"type\": \"boolean\"\r",
							" }\r",
							"};\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"tests[\"Valid Data1\"] = tv4.validate(data1, schema);\r",
							"console.log(\"Validation failed: \", tv4.error);"
						]
					}
				}
			],
			"request": {
				"url": "http://35.197.200.12:9000/api/users",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"user\":{\n\t\t\"username\":\"Harry\",\n\t\t\"password\":\"PartyHat\"\n\t}\n}"
				},
				"description": ""
			},
			"response": []
		},
		{
			"name": "http://35.197.200.12:9000/api/users/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// example using pm.response.to.have\r",
							"pm.test(\"response is ok\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// example using response assertions\r",
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.have.jsonBody(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 100000;\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"\r",
							"\r",
							"postman.clearGlobalVariable(\"variable_key\");\r",
							"\r",
							"postman.clearEnvironmentVariable(\"variable_key\");\r",
							"\r",
							"\r",
							"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
							"\r",
							"tests[\"Response time is less than 200ms\"] = responseTime < 50000;\r",
							"\r",
							"postman.setGlobalVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"postman.setEnvironmentVariable(\"variable_key\", \"variable_value\");\r",
							"\r",
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							"\r",
							"\r",
							"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 202;\r",
							"\r",
							"var schema = {\r",
							" \"items\": {\r",
							" \"type\": \"boolean\"\r",
							" }\r",
							"};\r",
							"var data1 = [true, false];\r",
							"var data2 = [true, 123];\r",
							"\r",
							"tests[\"Valid Data1\"] = tv4.validate(data1, schema);\r",
							"console.log(\"Validation failed: \", tv4.error);"
						]
					}
				}
			],
			"request": {
				"url": "http://35.197.200.12:9000/api/users/login",
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": ""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"user\":{\n\t\t\"username\":\"Harry\",\n\t\t\"password\":\"PartyHat\"\n\t}\n}"
				},
				"description": ""
			},
			"response": []
		}
	]
}